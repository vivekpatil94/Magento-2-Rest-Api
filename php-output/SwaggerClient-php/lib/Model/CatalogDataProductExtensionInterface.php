<?php
/**
 * CatalogDataProductExtensionInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Community
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CatalogDataProductExtensionInterface Class Doc Comment
 *
 * @category    Class */
 // @description ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogDataProductExtensionInterface implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'catalog-data-product-extension-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bundle_product_options' => '\Swagger\Client\Model\BundleDataOptionInterface[]',
        'downloadable_product_links' => '\Swagger\Client\Model\DownloadableDataLinkInterface[]',
        'downloadable_product_samples' => '\Swagger\Client\Model\DownloadableDataSampleInterface[]',
        'stock_item' => '\Swagger\Client\Model\CatalogInventoryDataStockItemInterface',
        'configurable_product_options' => '\Swagger\Client\Model\ConfigurableProductDataOptionInterface[]',
        'configurable_product_links' => 'int[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bundle_product_options' => 'bundle_product_options',
        'downloadable_product_links' => 'downloadable_product_links',
        'downloadable_product_samples' => 'downloadable_product_samples',
        'stock_item' => 'stock_item',
        'configurable_product_options' => 'configurable_product_options',
        'configurable_product_links' => 'configurable_product_links'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bundle_product_options' => 'setBundleProductOptions',
        'downloadable_product_links' => 'setDownloadableProductLinks',
        'downloadable_product_samples' => 'setDownloadableProductSamples',
        'stock_item' => 'setStockItem',
        'configurable_product_options' => 'setConfigurableProductOptions',
        'configurable_product_links' => 'setConfigurableProductLinks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bundle_product_options' => 'getBundleProductOptions',
        'downloadable_product_links' => 'getDownloadableProductLinks',
        'downloadable_product_samples' => 'getDownloadableProductSamples',
        'stock_item' => 'getStockItem',
        'configurable_product_options' => 'getConfigurableProductOptions',
        'configurable_product_links' => 'getConfigurableProductLinks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bundle_product_options'] = isset($data['bundle_product_options']) ? $data['bundle_product_options'] : null;
        $this->container['downloadable_product_links'] = isset($data['downloadable_product_links']) ? $data['downloadable_product_links'] : null;
        $this->container['downloadable_product_samples'] = isset($data['downloadable_product_samples']) ? $data['downloadable_product_samples'] : null;
        $this->container['stock_item'] = isset($data['stock_item']) ? $data['stock_item'] : null;
        $this->container['configurable_product_options'] = isset($data['configurable_product_options']) ? $data['configurable_product_options'] : null;
        $this->container['configurable_product_links'] = isset($data['configurable_product_links']) ? $data['configurable_product_links'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets bundle_product_options
     * @return \Swagger\Client\Model\BundleDataOptionInterface[]
     */
    public function getBundleProductOptions()
    {
        return $this->container['bundle_product_options'];
    }

    /**
     * Sets bundle_product_options
     * @param \Swagger\Client\Model\BundleDataOptionInterface[] $bundle_product_options
     * @return $this
     */
    public function setBundleProductOptions($bundle_product_options)
    {
        $this->container['bundle_product_options'] = $bundle_product_options;

        return $this;
    }

    /**
     * Gets downloadable_product_links
     * @return \Swagger\Client\Model\DownloadableDataLinkInterface[]
     */
    public function getDownloadableProductLinks()
    {
        return $this->container['downloadable_product_links'];
    }

    /**
     * Sets downloadable_product_links
     * @param \Swagger\Client\Model\DownloadableDataLinkInterface[] $downloadable_product_links
     * @return $this
     */
    public function setDownloadableProductLinks($downloadable_product_links)
    {
        $this->container['downloadable_product_links'] = $downloadable_product_links;

        return $this;
    }

    /**
     * Gets downloadable_product_samples
     * @return \Swagger\Client\Model\DownloadableDataSampleInterface[]
     */
    public function getDownloadableProductSamples()
    {
        return $this->container['downloadable_product_samples'];
    }

    /**
     * Sets downloadable_product_samples
     * @param \Swagger\Client\Model\DownloadableDataSampleInterface[] $downloadable_product_samples
     * @return $this
     */
    public function setDownloadableProductSamples($downloadable_product_samples)
    {
        $this->container['downloadable_product_samples'] = $downloadable_product_samples;

        return $this;
    }

    /**
     * Gets stock_item
     * @return \Swagger\Client\Model\CatalogInventoryDataStockItemInterface
     */
    public function getStockItem()
    {
        return $this->container['stock_item'];
    }

    /**
     * Sets stock_item
     * @param \Swagger\Client\Model\CatalogInventoryDataStockItemInterface $stock_item
     * @return $this
     */
    public function setStockItem($stock_item)
    {
        $this->container['stock_item'] = $stock_item;

        return $this;
    }

    /**
     * Gets configurable_product_options
     * @return \Swagger\Client\Model\ConfigurableProductDataOptionInterface[]
     */
    public function getConfigurableProductOptions()
    {
        return $this->container['configurable_product_options'];
    }

    /**
     * Sets configurable_product_options
     * @param \Swagger\Client\Model\ConfigurableProductDataOptionInterface[] $configurable_product_options
     * @return $this
     */
    public function setConfigurableProductOptions($configurable_product_options)
    {
        $this->container['configurable_product_options'] = $configurable_product_options;

        return $this;
    }

    /**
     * Gets configurable_product_links
     * @return int[]
     */
    public function getConfigurableProductLinks()
    {
        return $this->container['configurable_product_links'];
    }

    /**
     * Sets configurable_product_links
     * @param int[] $configurable_product_links
     * @return $this
     */
    public function setConfigurableProductLinks($configurable_product_links)
    {
        $this->container['configurable_product_links'] = $configurable_product_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
